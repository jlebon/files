#!/bin/bash
set -euo pipefail

# This script is a workaround for:
# https://bugzilla.gnome.org/show_bug.cgi?id=707899#c4
# Essentially, spawning e.g. `gnome-terminal --command vim` will not behave as
# you expect: the vim process is actually owned by gnome-terminal-server, and
# the gnome-terminal process itself exits right away. This makes it useless in
# situations where we want to determine when vim exits by waiting on
# gnome-terminal.

# The hack implemented here simply uses tmux. We create a new session containing
# the process we want to execute, spawn gnome-terminal to attach to it, and then
# block until the started process finishes.

session_pid=$(tmux new-session -d -P -F '#{session_name}:#{pane_pid}' -- "$@")
session=${session_pid%:*}
pid=${session_pid#*:}

gnome-terminal --command "tmux attach-session -t $session"

# There is no canonical way to wait for an arbitrary PID to die without race
# conditions. The common kill -0 and /proc/$pid tricks are unfortunately
# inherently racy, but at least they're well understood. We can try being more
# sophisticated in the future and avoid the busy wait by wrapping the execution
# around lockfiles.

while [ -d /proc/$pid ]; do sleep 0.5; done
