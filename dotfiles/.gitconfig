[color]
	ui = true
[merge]
	conflictstyle=diff3
	tool = meld
[user]
	name = Jonathan Lebon
	email = jlebon@redhat.com
	signingkey = 519CE313
[core]
	editor = /usr/bin/vim
[alias]
	cam = commit -am
	scrap = reset --hard HEAD
	nuke = reset --hard HEAD^
	origin = reset --hard origin/master
	last = log -1 HEAD
	rewrite = ! git rebase -i $(git merge-base --octopus master origin HEAD)
	ck = checkout
	amend = commit --amend
	amendit = commit --amend --no-edit
	fix = commit --amend --no-edit -a
	cm = checkout master
	rlog = ! sh -c 'git log --reverse --ancestry-path $1^..HEAD' - 2>/dev/null
	rei = rebase -i
	rec = rebase --continue
	rea = rebase --abort
	l = log --pretty=oneline
	la = log --pretty=format:'%C(yellow)%h %Cred%ad %Cblue%an%Cgreen%d %Creset%s' --date=short
	lg = log --graph --pretty=format:'%C(yellow)%h %Cred%ad %Cblue%an%Cgreen%d %Creset%s' --date=short
	h = log --graph --pretty=format:'%C(yellow)%h %Cred%ad %Cblue%an%Cgreen%d %Creset%s' --date=short -n 10
	hh = log --graph --pretty=format:'%C(yellow)%h %Cred%ad %Cblue%an%Cgreen%d %Creset%s' --date=short -n 20
	update = add -u

	# same as git stash show, except you can just give the stash index number
	# defaults to git stash list if no index number given
	# also shows untracked stashed files (if any), which are kept in the third parent of the commit
	stashow = "!f() { if [ $# -eq 0 ]; then git stash list; else ( git show --color=always stash@{$1}; if git rev-parse --verify --quiet stash@{$1}^3; then git show --color=always stash@{$1}^3; fi; ) | LESS=FRX less -r; fi; }; f"

	pr = "!f() { pr=$1; shift; git push origin HEAD:refs/heads/pr/$pr \"$@\"; }; f"

	restamp = "! git commit --amend --no-edit --date=\"$(date -R)\""

	odiff = diff origin/master
	udiff = diff upstream/master
	get-pr = "!f() { pr=$1; shift; git fetch upstream pull/$pr/merge \"$@\"; git checkout FETCH_HEAD; }; f"
[pull]
	rebase = preserve
[push]
	default = simple
[diff]
	algorithm = patience
	renames = copies
[include]
	path = .gitconfig.local
[commit]
	verbose = true
