#!/bin/bash
set -euo pipefail
IFS=$'\n\t'

if [[ $0 != "utils/install" ]]; then
	echo "ERROR: Must be run from repo root." >&2
	exit 1
fi

if [ $# -eq 0 ]; then
	echo "Save installed file in stash and replace with repo file."
	echo "Usage: $0 <file>..."
	echo "Example: $0 dotfiles/.bashrc"
	exit
fi

# Workaround for git-diff-index bug which would incorrectly give an error code
# for no reason. Calling git-status beforehand seems to fix it.
git status &> /dev/null

if ! git diff-index --quiet HEAD; then
	echo "ERROR: Dirty workspace." >&2
	exit 1
fi

while [ $# -gt 0 ]; do

	file=$1; shift

	if [[ $file == /* ]]; then
		echo "ERROR: Must use relative file paths." >&2
		exit 1
	fi

	if [ -d "$file" ]; then
		continue
	fi

	dir=$(dirname $file)
	base=$(basename $file)

	target=
	if [[ $dir == "dotfiles" ]]; then
		target="$HOME/$base"
	elif [[ $dir == "bin" ]]; then
		target="/usr/local/bin/$base"
	elif [[ $dir == "sbin" ]]; then
		target="/usr/local/sbin/$base"
	fi

	if [ ! -e "$target" ]; then
		echo "INFO: Creating empty file \"$target\"."
		touch "$target"
	fi

	cp "$target" "$file"

done

# Workaround for git-diff-index bug which would incorrectly give an error code
# for no reason. Calling git-status beforehand seems to fix it.
git status &> /dev/null

if git diff-index --quiet HEAD; then
	echo "INFO: Files already at latest version."
	exit 0
fi

git stash save "install backup" > /dev/null

echo "INFO: Saving files in stash@{0}"
stashed=$(git stash show stash@{0} --name-only)

echo "INFO: Installing files:"
for file in $stashed; do

	dir=$(dirname $file)
	base=$(basename $file)

	sudo=
	target=
	if [[ $dir == "dotfiles" ]]; then
		target="$HOME/$base"
	elif [[ $dir == "bin" ]]; then
		target="/usr/local/bin/$base"
		sudo=sudo
	elif [[ $dir == "sbin" ]]; then
		target="/usr/local/sbin/$base"
		sudo=sudo
	fi

	$sudo cp "$file" "$target"

	echo -e "\t$target"
done
